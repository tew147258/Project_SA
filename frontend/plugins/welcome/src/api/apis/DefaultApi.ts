/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersConfirmation,
    ControllersConfirmationFromJSON,
    ControllersConfirmationToJSON,
    EntBorrow,
    EntBorrowFromJSON,
    EntBorrowToJSON,
    EntConfirmation,
    EntConfirmationFromJSON,
    EntConfirmationToJSON,
    EntStadium,
    EntStadiumFromJSON,
    EntStadiumToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateBorrowRequest {
    borrow: EntBorrow;
}

export interface CreateConfirmationRequest {
    confirmation: ControllersConfirmation;
}

export interface CreateStadiumRequest {
    stadium: EntStadium;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteConfirmationRequest {
    id: number;
}

export interface DeleteStadiumRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetBorrowRequest {
    id: number;
}

export interface GetConfirmationRequest {
    id: number;
}

export interface GetStadiumRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListBorrowRequest {
    limit?: number;
    offset?: number;
}

export interface ListConfirmationRequest {
    limit?: number;
    offset?: number;
}

export interface ListStadiumRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateStadiumRequest {
    id: number;
    stadium: EntStadium;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create borrow
     * Create borrow
     */
    async createBorrowRaw(requestParameters: CreateBorrowRequest): Promise<runtime.ApiResponse<EntBorrow>> {
        if (requestParameters.borrow === null || requestParameters.borrow === undefined) {
            throw new runtime.RequiredError('borrow','Required parameter requestParameters.borrow was null or undefined when calling createBorrow.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/borrows`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBorrowToJSON(requestParameters.borrow),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBorrowFromJSON(jsonValue));
    }

    /**
     * Create borrow
     * Create borrow
     */
    async createBorrow(requestParameters: CreateBorrowRequest): Promise<EntBorrow> {
        const response = await this.createBorrowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create confirmation
     * Create confirmation
     */
    async createConfirmationRaw(requestParameters: CreateConfirmationRequest): Promise<runtime.ApiResponse<EntConfirmation>> {
        if (requestParameters.confirmation === null || requestParameters.confirmation === undefined) {
            throw new runtime.RequiredError('confirmation','Required parameter requestParameters.confirmation was null or undefined when calling createConfirmation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/confirmations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersConfirmationToJSON(requestParameters.confirmation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntConfirmationFromJSON(jsonValue));
    }

    /**
     * Create confirmation
     * Create confirmation
     */
    async createConfirmation(requestParameters: CreateConfirmationRequest): Promise<EntConfirmation> {
        const response = await this.createConfirmationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create stadium
     * Create stadium
     */
    async createStadiumRaw(requestParameters: CreateStadiumRequest): Promise<runtime.ApiResponse<EntStadium>> {
        if (requestParameters.stadium === null || requestParameters.stadium === undefined) {
            throw new runtime.RequiredError('stadium','Required parameter requestParameters.stadium was null or undefined when calling createStadium.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/stadiums`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStadiumToJSON(requestParameters.stadium),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStadiumFromJSON(jsonValue));
    }

    /**
     * Create stadium
     * Create stadium
     */
    async createStadium(requestParameters: CreateStadiumRequest): Promise<EntStadium> {
        const response = await this.createStadiumRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get confirmation by ID
     * Delete a confirmation entity by ID
     */
    async deleteConfirmationRaw(requestParameters: DeleteConfirmationRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteConfirmation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/confirmations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get confirmation by ID
     * Delete a confirmation entity by ID
     */
    async deleteConfirmation(requestParameters: DeleteConfirmationRequest): Promise<object> {
        const response = await this.deleteConfirmationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get stadium by ID
     * Delete a stadium entity by ID
     */
    async deleteStadiumRaw(requestParameters: DeleteStadiumRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStadium.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stadiums/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get stadium by ID
     * Delete a stadium entity by ID
     */
    async deleteStadium(requestParameters: DeleteStadiumRequest): Promise<object> {
        const response = await this.deleteStadiumRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get borrow by ID
     * Get a borrow entity by ID
     */
    async getBorrowRaw(requestParameters: GetBorrowRequest): Promise<runtime.ApiResponse<EntBorrow>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBorrow.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/borrows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBorrowFromJSON(jsonValue));
    }

    /**
     * get borrow by ID
     * Get a borrow entity by ID
     */
    async getBorrow(requestParameters: GetBorrowRequest): Promise<EntBorrow> {
        const response = await this.getBorrowRaw(requestParameters);
        return await response.value();
    }

    /**
     * get confirmation by ID
     * Get a confirmation entity by ID
     */
    async getConfirmationRaw(requestParameters: GetConfirmationRequest): Promise<runtime.ApiResponse<EntConfirmation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getConfirmation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/confirmations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntConfirmationFromJSON(jsonValue));
    }

    /**
     * get confirmation by ID
     * Get a confirmation entity by ID
     */
    async getConfirmation(requestParameters: GetConfirmationRequest): Promise<EntConfirmation> {
        const response = await this.getConfirmationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get stadium by ID
     * Get a stadium entity by ID
     */
    async getStadiumRaw(requestParameters: GetStadiumRequest): Promise<runtime.ApiResponse<EntStadium>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStadium.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stadiums/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStadiumFromJSON(jsonValue));
    }

    /**
     * get stadium by ID
     * Get a stadium entity by ID
     */
    async getStadium(requestParameters: GetStadiumRequest): Promise<EntStadium> {
        const response = await this.getStadiumRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list borrow entities
     * List borrow entities
     */
    async listBorrowRaw(requestParameters: ListBorrowRequest): Promise<runtime.ApiResponse<Array<EntBorrow>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/borrows`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBorrowFromJSON));
    }

    /**
     * list borrow entities
     * List borrow entities
     */
    async listBorrow(requestParameters: ListBorrowRequest): Promise<Array<EntBorrow>> {
        const response = await this.listBorrowRaw(requestParameters);
        return await response.value();
    }

    /**
     * list confirmation entities
     * List confirmation entities
     */
    async listConfirmationRaw(requestParameters: ListConfirmationRequest): Promise<runtime.ApiResponse<Array<EntConfirmation>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/confirmations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntConfirmationFromJSON));
    }

    /**
     * list confirmation entities
     * List confirmation entities
     */
    async listConfirmation(requestParameters: ListConfirmationRequest): Promise<Array<EntConfirmation>> {
        const response = await this.listConfirmationRaw(requestParameters);
        return await response.value();
    }

    /**
     * list stadium entities
     * List stadium entities
     */
    async listStadiumRaw(requestParameters: ListStadiumRequest): Promise<runtime.ApiResponse<Array<EntStadium>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stadiums`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStadiumFromJSON));
    }

    /**
     * list stadium entities
     * List stadium entities
     */
    async listStadium(requestParameters: ListStadiumRequest): Promise<Array<EntStadium>> {
        const response = await this.listStadiumRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update stadium by ID
     * Update a stadium entity by ID
     */
    async updateStadiumRaw(requestParameters: UpdateStadiumRequest): Promise<runtime.ApiResponse<EntStadium>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStadium.');
        }

        if (requestParameters.stadium === null || requestParameters.stadium === undefined) {
            throw new runtime.RequiredError('stadium','Required parameter requestParameters.stadium was null or undefined when calling updateStadium.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/stadiums/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntStadiumToJSON(requestParameters.stadium),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStadiumFromJSON(jsonValue));
    }

    /**
     * update stadium by ID
     * Update a stadium entity by ID
     */
    async updateStadium(requestParameters: UpdateStadiumRequest): Promise<EntStadium> {
        const response = await this.updateStadiumRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
