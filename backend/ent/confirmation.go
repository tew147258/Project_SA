// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/tew147258/app/ent/borrow"
	"github.com/tew147258/app/ent/confirmation"
	"github.com/tew147258/app/ent/stadium"
	"github.com/tew147258/app/ent/user"
)

// Confirmation is the model entity for the Confirmation schema.
type Confirmation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Bookingdate holds the value of the "bookingdate" field.
	Bookingdate time.Time `json:"bookingdate,omitempty"`
	// Bookingstart holds the value of the "bookingstart" field.
	Bookingstart time.Time `json:"bookingstart,omitempty"`
	// Bookingend holds the value of the "bookingend" field.
	Bookingend time.Time `json:"bookingend,omitempty"`
	// Hourstime holds the value of the "hourstime" field.
	Hourstime int `json:"hourstime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConfirmationQuery when eager-loading is set.
	Edges                        ConfirmationEdges `json:"edges"`
	borrow_borrow_confirmation   *int
	stadium_stadium_confirmation *int
	user_user_confirmation       *int
}

// ConfirmationEdges holds the relations/edges for other nodes in the graph.
type ConfirmationEdges struct {
	// ConfirmationUser holds the value of the ConfirmationUser edge.
	ConfirmationUser *User
	// ConfirmationStadium holds the value of the ConfirmationStadium edge.
	ConfirmationStadium *Stadium
	// ConfirmationBorrow holds the value of the ConfirmationBorrow edge.
	ConfirmationBorrow *Borrow
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ConfirmationUserOrErr returns the ConfirmationUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConfirmationEdges) ConfirmationUserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.ConfirmationUser == nil {
			// The edge ConfirmationUser was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ConfirmationUser, nil
	}
	return nil, &NotLoadedError{edge: "ConfirmationUser"}
}

// ConfirmationStadiumOrErr returns the ConfirmationStadium value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConfirmationEdges) ConfirmationStadiumOrErr() (*Stadium, error) {
	if e.loadedTypes[1] {
		if e.ConfirmationStadium == nil {
			// The edge ConfirmationStadium was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: stadium.Label}
		}
		return e.ConfirmationStadium, nil
	}
	return nil, &NotLoadedError{edge: "ConfirmationStadium"}
}

// ConfirmationBorrowOrErr returns the ConfirmationBorrow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConfirmationEdges) ConfirmationBorrowOrErr() (*Borrow, error) {
	if e.loadedTypes[2] {
		if e.ConfirmationBorrow == nil {
			// The edge ConfirmationBorrow was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: borrow.Label}
		}
		return e.ConfirmationBorrow, nil
	}
	return nil, &NotLoadedError{edge: "ConfirmationBorrow"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Confirmation) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // bookingdate
		&sql.NullTime{},  // bookingstart
		&sql.NullTime{},  // bookingend
		&sql.NullInt64{}, // hourstime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Confirmation) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // borrow_borrow_confirmation
		&sql.NullInt64{}, // stadium_stadium_confirmation
		&sql.NullInt64{}, // user_user_confirmation
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Confirmation fields.
func (c *Confirmation) assignValues(values ...interface{}) error {
	if m, n := len(values), len(confirmation.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field bookingdate", values[0])
	} else if value.Valid {
		c.Bookingdate = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field bookingstart", values[1])
	} else if value.Valid {
		c.Bookingstart = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field bookingend", values[2])
	} else if value.Valid {
		c.Bookingend = value.Time
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field hourstime", values[3])
	} else if value.Valid {
		c.Hourstime = int(value.Int64)
	}
	values = values[4:]
	if len(values) == len(confirmation.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field borrow_borrow_confirmation", value)
		} else if value.Valid {
			c.borrow_borrow_confirmation = new(int)
			*c.borrow_borrow_confirmation = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field stadium_stadium_confirmation", value)
		} else if value.Valid {
			c.stadium_stadium_confirmation = new(int)
			*c.stadium_stadium_confirmation = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_user_confirmation", value)
		} else if value.Valid {
			c.user_user_confirmation = new(int)
			*c.user_user_confirmation = int(value.Int64)
		}
	}
	return nil
}

// QueryConfirmationUser queries the ConfirmationUser edge of the Confirmation.
func (c *Confirmation) QueryConfirmationUser() *UserQuery {
	return (&ConfirmationClient{config: c.config}).QueryConfirmationUser(c)
}

// QueryConfirmationStadium queries the ConfirmationStadium edge of the Confirmation.
func (c *Confirmation) QueryConfirmationStadium() *StadiumQuery {
	return (&ConfirmationClient{config: c.config}).QueryConfirmationStadium(c)
}

// QueryConfirmationBorrow queries the ConfirmationBorrow edge of the Confirmation.
func (c *Confirmation) QueryConfirmationBorrow() *BorrowQuery {
	return (&ConfirmationClient{config: c.config}).QueryConfirmationBorrow(c)
}

// Update returns a builder for updating this Confirmation.
// Note that, you need to call Confirmation.Unwrap() before calling this method, if this Confirmation
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Confirmation) Update() *ConfirmationUpdateOne {
	return (&ConfirmationClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Confirmation) Unwrap() *Confirmation {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Confirmation is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Confirmation) String() string {
	var builder strings.Builder
	builder.WriteString("Confirmation(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", bookingdate=")
	builder.WriteString(c.Bookingdate.Format(time.ANSIC))
	builder.WriteString(", bookingstart=")
	builder.WriteString(c.Bookingstart.Format(time.ANSIC))
	builder.WriteString(", bookingend=")
	builder.WriteString(c.Bookingend.Format(time.ANSIC))
	builder.WriteString(", hourstime=")
	builder.WriteString(fmt.Sprintf("%v", c.Hourstime))
	builder.WriteByte(')')
	return builder.String()
}

// Confirmations is a parsable slice of Confirmation.
type Confirmations []*Confirmation

func (c Confirmations) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
